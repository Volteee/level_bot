services:
  front:
    build:
      context: .
      target: runner
    restart: on-failure
    command: node server.js
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      BOT_TOKEN: ${BOT_TOKEN}
    networks:
      - network

  bot:
    build:
      context: .
      target: bot
    restart: on-failure
    command: python -u ./main.py
    depends_on:
      - mongodb
      - migration
    environment:
      MONGO: mongodb://mongodb:27017/database
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      BOT_TOKEN: ${BOT_TOKEN}
      ADMIN_USERNAME: ${ADMIN_USERNAME}
    volumes:
      - files:/data/files
    networks:
      - network
  
  migration:
    build:
      context: .
      target: migration
    command: alembic upgrade head
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    networks:
      - network
  
  postgres:
    image: postgres:14.8-alpine3.18
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - network

  mongodb:
    image: mongo:6-jammy
    restart: always
    volumes:
      - mongodata:/data/db
    networks:
      - network
  
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./key.pem:/etc/ssl/certs/key.pem
      - ./cert.pem:/etc/ssl/certs/cert.pem
    depends_on:
      - front
    networks:
      - network

volumes:
  files:
  mongodata:
  pgdata:

networks:
  network:
    driver: bridge